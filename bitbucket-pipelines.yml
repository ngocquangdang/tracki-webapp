image: node:12-alpine

definitions:
  services:
    docker:
      memory: 1024
  caches:
    nextcache: .next/cache
  steps:
    - step: &run-and-test
        name: Install dependency and run test eslint
        caches:
          - node
          - nextcache
        script:
          - yarn
          - yarn lint
        artifacts:
          - node_modules/**
    - step: &build-and-push-to-docker-registry
        name: Push to Docker Registry
        script:
          - cat set_env.sh
          - source set_env.sh
          - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
          - docker build -t mtrk2021/tracki-frontend:$TAG .
          - docker push mtrk2021/tracki-frontend:$TAG
          - cat ./deploy.sh
          - apk add --update --no-cache openssh sshpass
          - mkdir -p /root/.ssh
          - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> /root/.ssh/config
          - sshpass -p "$SERVER_PASS" scp ./deploy.sh $USER_SSH_SERVER@$IP_SSH_SERVER:/tmp
          - sshpass -p "$SERVER_PASS" ssh $USER_SSH_SERVER@$IP_SSH_SERVER chmod -R 777 /tmp/deploy.sh
          - sshpass -p "$SERVER_PASS" ssh $USER_SSH_SERVER@$IP_SSH_SERVER /tmp/deploy.sh $REGISTRY_PASSWORD $REGISTRY_USER mtrk2021/tracki-frontend:$TAG
        services:
          - docker
        size: 2x
        caches:
          - docker

pipelines:
  default:
    - step: *run-and-test
    - step:
        name: Run build
        script:
          - yarn build
  branches:
    develop:
      - step: *run-and-test
      - parallel:
          - step:
              name: Build Dev environment
              caches:
                - node
                - nextcache
                - docker
              script:
                - export TAG="dev_${BITBUCKET_COMMIT::7}"
                - yarn
                - yarn build:development
                - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
                - docker build -t mtrk2021/tracki-frontend:$TAG .
                - docker push mtrk2021/tracki-frontend:$TAG
                - apk add --update --no-cache openssh sshpass
                - mkdir -p /root/.ssh
                - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> /root/.ssh/config
                - sshpass -p "$SERVER_PASS" scp ./deploy.sh $USER_SSH_SERVER@$IP_SSH_SERVER:/tmp
                - sshpass -p "$SERVER_PASS" ssh $USER_SSH_SERVER@$IP_SSH_SERVER chmod -R 777 /tmp/deploy.sh
                - sshpass -p "$SERVER_PASS" ssh $USER_SSH_SERVER@$IP_SSH_SERVER /tmp/deploy.sh $REGISTRY_PASSWORD $REGISTRY_USER mtrk2021/tracki-frontend:$TAG
              services:
                - docker
              size: 2x
              deployment: develop
          - step:
              name: Build Dev2 environment
              caches:
                - node
                - nextcache
                - docker
              script:
                - export TAG="dev2_${BITBUCKET_COMMIT::7}"
                - yarn
                - yarn build:preproduction
                - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
                - docker build -t mtrk2021/tracki-frontend:$TAG .
                - docker push mtrk2021/tracki-frontend:$TAG
                - apk add --update --no-cache openssh sshpass
                - mkdir -p /root/.ssh
                - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> /root/.ssh/config
                - sed -i -e 's/tracki-frontend/tracki-frontend_dev2/g' deploy.sh
                - sed -i -e 's/3001/3002/g' deploy.sh
                - sed -i -e 's/dev_/dev2_/g' deploy.sh
                - sshpass -p "$SERVER_PASS" scp ./deploy.sh $USER_SSH_SERVER@$IP_SSH_SERVER:/tmp
                - sshpass -p "$SERVER_PASS" ssh $USER_SSH_SERVER@$IP_SSH_SERVER chmod -R 777 /tmp/deploy.sh
                - cat deploy.sh
                - sshpass -p "$SERVER_PASS" ssh $USER_SSH_SERVER@$IP_SSH_SERVER /tmp/deploy.sh $REGISTRY_PASSWORD $REGISTRY_USER mtrk2021/tracki-frontend:$TAG
              services:
                - docker
              size: 2x
              deployment: developv2
    master:
      - step: *run-and-test
      - step:
          <<: *build-and-push-to-docker-registry
          deployment: production
          trigger: manual
